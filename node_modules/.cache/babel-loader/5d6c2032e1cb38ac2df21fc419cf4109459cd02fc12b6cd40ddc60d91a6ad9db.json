{"ast":null,"code":"var _jsxFileName = \"/home/luis/Documentos/PisCuarto/proyecto.v3/fronend/rutas_evacuacion/src/components/MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport { useLocation } from 'react-router-dom';\nimport MenuBar from \"./MenuBar\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet/dist/images/marker-icon-2x.png';\nimport 'leaflet/dist/images/marker-shadow.png';\nimport zonaNoSeguraImage from '../assets/ubicacion.webp';\nimport zonaSeguraImage from '../assets/zona-segura.webp';\nimport userLocationIconImage from '../assets/user-location.webp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = () => {\n  _s();\n  const [state, setState] = useState({\n    currentLocation: null,\n    zoom: 20,\n    nearestNode: null,\n    polylinesData: []\n  });\n  const location = useLocation();\n  useEffect(() => {\n    const getUserLocation = () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        const userLocation = {\n          lat: latitude,\n          lng: longitude\n        };\n        setState(currentState => ({\n          ...currentState,\n          currentLocation: userLocation\n        }));\n        getNearestNode(userLocation);\n      }, error => {\n        console.error(\"Error getting user location:\", error);\n      });\n    };\n\n    // Dentro del bloque useEffect\n    // Dentro del bloque useEffect\n    const getNearestNode = async userLocation => {\n      try {\n        const response = await fetch(\"http://localhost:8095/api/v1/nodos\");\n        const responseData = await response.json();\n        const data = Array.isArray(responseData.data) ? responseData.data : [];\n        const coordinatesData = data.map(nodo => ({\n          lat: nodo.latitud,\n          lng: nodo.longitud,\n          info: nodo\n        }));\n        const nearestNode = findNearestNode(userLocation, coordinatesData);\n        if (nearestNode) {\n          const nearestNodePolyline = {\n            positions: [{\n              lat: userLocation.lat,\n              lng: userLocation.lng\n            }, {\n              lat: nearestNode.latitud,\n              lng: nearestNode.longitud\n            }],\n            color: \"blue\"\n          };\n          setState(currentState => ({\n            ...currentState,\n            nearestNode: nearestNode,\n            polylinesData: [nearestNodePolyline]\n          }));\n          const nearestNodeExternalId = nearestNode.external_registro;\n\n          // Hacer una solicitud HTTP al endpoint para obtener la ruta\n          const rutaResponse = await fetch(`http://localhost:8095/api/v1/ruta/${nearestNodeExternalId}`);\n          const rutaData = await rutaResponse.json();\n          console.log(\"Resultado de la solicitud de ruta:\", rutaData);\n\n          // Parsea la respuesta para obtener las coordenadas de la ruta\n          const rutaCoordinates = rutaData.map(punto => ({\n            lat: punto.latitud,\n            lng: punto.longitud\n          }));\n\n          // Agrega las coordenadas de la ruta a polylinesData\n          const rutaPolyline = {\n            positions: rutaCoordinates,\n            color: \"red\" // Puedes cambiar el color si lo deseas\n          };\n          setState(currentState => ({\n            ...currentState,\n            polylinesData: [...currentState.polylinesData, rutaPolyline]\n          }));\n\n          // Agrega marcadores para cada nodo\n          const markers = coordinatesData.map((nodo, index) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: nodo.lat,\n              lng: nodo.lng\n            },\n            icon: nodo.info.tipoDeNodo === 'zona_en_riesgo' ? zonaNoSeguraIcon : zonaSeguraIcon,\n            children: /*#__PURE__*/_jsxDEV(Popup, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: nodo.info.nombre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: nodo.info.latitud + \" \" + nodo.info.longitud\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: nodo.info.tipoDeNodo === 'zona_en_riesgo' ? 'Zona en riesgo' : 'Zona segura'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this));\n          setState(currentState => ({\n            ...currentState,\n            markers: markers\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error getting data:\", error);\n      }\n    };\n    const findNearestNode = (userLocation, markersData) => {\n      if (markersData.length === 0) {\n        console.error(\"No hay nodos disponibles para calcular el nodo más cercano.\");\n        return null;\n      }\n      let nearestNode = markersData.reduce((prev, current) => {\n        const prevDistance = Math.sqrt(Math.pow(prev.lat - userLocation.lat, 2) + Math.pow(prev.lng - userLocation.lng, 2));\n        const currentDistance = Math.sqrt(Math.pow(current.lat - userLocation.lat, 2) + Math.pow(current.lng - userLocation.lng, 2));\n        return prevDistance < currentDistance ? prev : current;\n      });\n      return nearestNode.info;\n    };\n    getUserLocation();\n  }, []); // <-- Dependencias vacías para que se ejecute solo en el montaje\n\n  const userLocationIcon = new L.Icon({\n    iconUrl: userLocationIconImage,\n    iconSize: [32, 32],\n    iconAnchor: [16, 32],\n    popupAnchor: [0, -32]\n  });\n  const zonaNoSeguraIcon = new L.Icon({\n    iconUrl: zonaNoSeguraImage,\n    iconSize: [32, 32],\n    iconAnchor: [16, 32],\n    popupAnchor: [0, -32]\n  });\n  const zonaSeguraIcon = new L.Icon({\n    iconUrl: zonaSeguraImage,\n    iconSize: [32, 32],\n    iconAnchor: [16, 32],\n    popupAnchor: [0, -32]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(MenuBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: state.currentLocation ? /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: state.currentLocation,\n        zoom: state.zoom,\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"OpenStreetMap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), state.currentLocation && /*#__PURE__*/_jsxDEV(Marker, {\n          position: state.currentLocation,\n          icon: userLocationIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Tu ubicaci\\xF3n actual\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }, this), state.nearestNode && /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: state.nearestNode.latitud,\n            lng: state.nearestNode.longitud\n          },\n          icon: state.nearestNode.tipoDeNodo === 'zona_en_riesgo' ? zonaNoSeguraIcon : zonaSeguraIcon,\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: state.nearestNode.nombre\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this), state.markers, state.polylinesData.map((polyline, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: polyline.positions,\n          color: polyline.color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this)), state.polylinesData.map((polyline, index) => /*#__PURE__*/_jsxDEV(Polyline, {\n          positions: polyline.positions,\n          color: polyline.color\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Obteniendo ubicaci\\xF3n...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n};\n_s(MapView, \"Grxik3wnHd1bLWW4O9coZ0h/2j4=\", false, function () {\n  return [useLocation];\n});\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Polyline","useLocation","MenuBar","L","zonaNoSeguraImage","zonaSeguraImage","userLocationIconImage","jsxDEV","_jsxDEV","MapView","_s","state","setState","currentLocation","zoom","nearestNode","polylinesData","location","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","userLocation","lat","lng","currentState","getNearestNode","error","console","response","fetch","responseData","json","data","Array","isArray","coordinatesData","map","nodo","latitud","longitud","info","findNearestNode","nearestNodePolyline","positions","color","nearestNodeExternalId","external_registro","rutaResponse","rutaData","log","rutaCoordinates","punto","rutaPolyline","markers","index","icon","tipoDeNodo","zonaNoSeguraIcon","zonaSeguraIcon","children","nombre","fileName","_jsxFileName","lineNumber","columnNumber","markersData","length","reduce","prev","current","prevDistance","Math","sqrt","pow","currentDistance","userLocationIcon","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","center","url","attribution","polyline","_c","$RefreshReg$"],"sources":["/home/luis/Documentos/PisCuarto/proyecto.v3/fronend/rutas_evacuacion/src/components/MapView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport { useLocation } from 'react-router-dom';\nimport MenuBar from \"./MenuBar\";\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet/dist/images/marker-icon-2x.png';\nimport 'leaflet/dist/images/marker-shadow.png';\nimport zonaNoSeguraImage from '../assets/ubicacion.webp';\nimport zonaSeguraImage from '../assets/zona-segura.webp';\nimport userLocationIconImage from '../assets/user-location.webp';\n\nconst MapView = () => {\n    const [state, setState] = useState({\n        currentLocation: null,\n        zoom: 20,\n        nearestNode: null,\n        polylinesData: []\n    });\n\n    const location = useLocation();\n\n    useEffect(() => {\n        const getUserLocation = () => {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    const userLocation = { lat: latitude, lng: longitude };\n\n                    setState((currentState) => ({\n                        ...currentState,\n                        currentLocation: userLocation\n                    }));\n\n                    getNearestNode(userLocation);\n                },\n                (error) => {\n                    console.error(\"Error getting user location:\", error);\n                }\n            );\n        };\n\n        // Dentro del bloque useEffect\n        // Dentro del bloque useEffect\n        const getNearestNode = async (userLocation) => {\n            try {\n                const response = await fetch(\"http://localhost:8095/api/v1/nodos\");\n                const responseData = await response.json();\n\n                const data = Array.isArray(responseData.data) ? responseData.data : [];\n\n                const coordinatesData = data.map(nodo => ({\n                    lat: nodo.latitud,\n                    lng: nodo.longitud,\n                    info: nodo\n                }));\n\n                const nearestNode = findNearestNode(userLocation, coordinatesData);\n\n                if (nearestNode) {\n                    const nearestNodePolyline = {\n                        positions: [\n                            { lat: userLocation.lat, lng: userLocation.lng },\n                            { lat: nearestNode.latitud, lng: nearestNode.longitud }\n                        ],\n                        color: \"blue\"\n                    };\n\n                    setState((currentState) => ({\n                        ...currentState,\n                        nearestNode: nearestNode,\n                        polylinesData: [nearestNodePolyline]\n                    }));\n\n                    const nearestNodeExternalId = nearestNode.external_registro;\n\n                    // Hacer una solicitud HTTP al endpoint para obtener la ruta\n                    const rutaResponse = await fetch(`http://localhost:8095/api/v1/ruta/${nearestNodeExternalId}`);\n                    const rutaData = await rutaResponse.json();\n\n                    console.log(\"Resultado de la solicitud de ruta:\", rutaData);\n\n                    // Parsea la respuesta para obtener las coordenadas de la ruta\n                    const rutaCoordinates = rutaData.map(punto => ({\n                        lat: punto.latitud,\n                        lng: punto.longitud\n                    }));\n\n                    // Agrega las coordenadas de la ruta a polylinesData\n                    const rutaPolyline = {\n                        positions: rutaCoordinates,\n                        color: \"red\" // Puedes cambiar el color si lo deseas\n                    };\n\n                    setState((currentState) => ({\n                        ...currentState,\n                        polylinesData: [...currentState.polylinesData, rutaPolyline]\n                    }));\n\n                    // Agrega marcadores para cada nodo\n                    const markers = coordinatesData.map((nodo, index) => (\n                        <Marker\n                            key={index}\n                            position={{ lat: nodo.lat, lng: nodo.lng }}\n                            icon={nodo.info.tipoDeNodo === 'zona_en_riesgo' ? zonaNoSeguraIcon : zonaSeguraIcon}\n                        >\n                            <Popup>\n                                <div>\n                                    <p>{nodo.info.nombre}</p>\n                                    <p>{nodo.info.latitud+\" \" +nodo.info.longitud}</p>\n                                    <p>{}</p>\n                                    <p>{nodo.info.tipoDeNodo === 'zona_en_riesgo' ? 'Zona en riesgo' : 'Zona segura'}</p>\n                                </div>\n                            </Popup>\n                        </Marker>\n                    ));\n\n                    setState((currentState) => ({\n                        ...currentState,\n                        markers: markers\n                    }));\n                }\n            } catch (error) {\n                console.error(\"Error getting data:\", error);\n            }\n        };\n\n\n        const findNearestNode = (userLocation, markersData) => {\n            if (markersData.length === 0) {\n                console.error(\"No hay nodos disponibles para calcular el nodo más cercano.\");\n                return null;\n            }\n\n            let nearestNode = markersData.reduce((prev, current) => {\n                const prevDistance = Math.sqrt(\n                    Math.pow(prev.lat - userLocation.lat, 2) + Math.pow(prev.lng - userLocation.lng, 2)\n                );\n\n                const currentDistance = Math.sqrt(\n                    Math.pow(current.lat - userLocation.lat, 2) + Math.pow(current.lng - userLocation.lng, 2)\n                );\n\n                return prevDistance < currentDistance ? prev : current;\n            });\n\n            return nearestNode.info;\n        };\n\n        getUserLocation();\n    }, []);  // <-- Dependencias vacías para que se ejecute solo en el montaje\n\n    const userLocationIcon = new L.Icon({\n        iconUrl: userLocationIconImage,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32],\n        popupAnchor: [0, -32]\n    });\n\n    const zonaNoSeguraIcon = new L.Icon({\n        iconUrl: zonaNoSeguraImage,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32],\n        popupAnchor: [0, -32]\n    });\n\n    const zonaSeguraIcon = new L.Icon({\n        iconUrl: zonaSeguraImage,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32],\n        popupAnchor: [0, -32]\n    });\n\n    return (\n        <div>\n            <div><MenuBar></MenuBar></div>\n            <div>\n                {state.currentLocation ? (\n                    <MapContainer center={state.currentLocation} zoom={state.zoom}>\n                        <TileLayer\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                            attribution=\"OpenStreetMap\"\n                        />\n\n                        {state.currentLocation && (\n                            <Marker\n                                position={state.currentLocation}\n                                icon={userLocationIcon}\n                            >\n                                <Popup>\n                                    <div>\n                                        <p>Tu ubicación actual</p>\n                                    </div>\n                                </Popup>\n                            </Marker>\n                        )}\n\n                        {state.nearestNode && (\n                            <Marker\n                                position={{ lat: state.nearestNode.latitud, lng: state.nearestNode.longitud }}\n                                icon={state.nearestNode.tipoDeNodo === 'zona_en_riesgo' ? zonaNoSeguraIcon : zonaSeguraIcon}\n                            >\n                                <Popup>\n                                    <div>\n                                        <p>{state.nearestNode.nombre}</p>\n                                    </div>\n                                </Popup>\n                            </Marker>\n                        )}\n\n                        {state.markers}\n\n                        {state.polylinesData.map((polyline, index) => (\n                            <Polyline\n                                key={index}\n                                positions={polyline.positions}\n                                color={polyline.color}\n                            />\n                        ))}\n\n                        {state.polylinesData.map((polyline, index) => (\n                            <Polyline\n                                key={index}\n                                positions={polyline.positions}\n                                color={polyline.color}\n                            />\n                        ))}\n                    </MapContainer>\n                ) : (\n                    <p>Obteniendo ubicación...</p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default MapView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}